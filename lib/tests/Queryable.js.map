{"version":3,"sources":["../../src/tests/Queryable.js"],"names":["assert","exports","queryable","ok","where","expBuilder","property","isEqualTo","query","getQuery","equal","children","nodeName","value","expressionBuilder","expression","throws","orderBy","length","include","take","skip","or","and","orderByDesc","testParameters","test1","test2","setParameters","deepEqual","parameters","withParameters","queryable1","queryable2","merge","provider","executeAsync","Promise","resolve","toArrayAsync","then","guidExpression","toGuid","forEachAsync","countAsync","toArrayWithCountAsync","allAsync","anyAsync","firstOrDefaultAsync","firstAsync","lastAsync","selectAsync","containsAsync","ifNone","ifAny","intersectsAsync","Array","prototype","asQueryable","compareToQueryable","testType","test","ofType","Type","copiedQueryable","copy"],"mappings":"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","file":"Queryable.js","sourcesContent":["import * as assert from \"assert\";\r\nimport Queryable from \"./../query/Queryable\";\r\nimport { ExpressionBuilder } from \"../query/ExpressionBuilder\";\r\n\r\nexports[\"Queryable: Constructor.\"] = function() {\r\n    const queryable = new Queryable();\r\n    assert.ok(true);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (where: single)\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable = queryable.where(expBuilder => {\r\n        return expBuilder.property(\"firstName\").isEqualTo(\"Jared\");\r\n    });\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.equal(\"equalTo\", query.where.children[0].nodeName);\r\n    assert.equal(\"firstName\", query.where.children[0].children[0].children[1].value);\r\n    assert.equal(\"Jared\", query.where.children[0].children[1].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (where: chain)\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable = queryable\r\n        .where(expBuilder => {\r\n            return expBuilder.property(\"firstName\").isEqualTo(\"Jared\");\r\n        })\r\n        .where(expBuilder => {\r\n            return expBuilder.property(\"lastName\").isEqualTo(\"Barnes\");\r\n        });\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.equal(\"and\", query.where.children[0].nodeName);\r\n    assert.equal(\"equalTo\", query.where.children[0].children[0].nodeName);\r\n    assert.equal(\"firstName\", query.where.children[0].children[0].children[0].children[1].value);\r\n    assert.equal(\"Jared\", query.where.children[0].children[0].children[1].value);\r\n    assert.equal(\"equalTo\", query.where.children[0].children[1].nodeName);\r\n    assert.equal(\"lastName\", query.where.children[0].children[1].children[0].children[1].value);\r\n    assert.equal(\"Barnes\", query.where.children[0].children[1].children[1].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (where: with ExpressionBuilder instance.)\"] = function() {\r\n    const expressionBuilder = new ExpressionBuilder();\r\n    const expression = expressionBuilder.property(\"firstName\").isEqualTo(\"Jared\");\r\n    let queryable = new Queryable();\r\n    queryable = queryable.where(expression);\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.equal(\"equalTo\", query.where.children[0].nodeName);\r\n    assert.equal(\"firstName\", query.where.children[0].children[0].children[1].value);\r\n    assert.equal(\"Jared\", query.where.children[0].children[1].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (where: w/o lambda or ExpressionBuilder instance)\"] = function() {\r\n    let queryable = new Queryable();\r\n\r\n    assert.throws(() => {\r\n        queryable = queryable.where();\r\n    });\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (orderBy: single)\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable = queryable.orderBy(expBuilder => {\r\n        return expBuilder.property(\"firstName\");\r\n    });\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.equal(\"ascending\", query.orderBy.children[0].nodeName);\r\n    assert.equal(\"firstName\", query.orderBy.children[0].children[0].children[1].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (orderBy: chain)\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable = queryable\r\n        .orderBy(expBuilder => {\r\n            return expBuilder.property(\"firstName\");\r\n        })\r\n        .orderBy(expBuilder => {\r\n            return expBuilder.property(\"lastName\");\r\n        });\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.equal(\"ascending\", query.orderBy.children[0].nodeName);\r\n    assert.equal(\"firstName\", query.orderBy.children[0].children[0].children[1].value);\r\n    assert.equal(\"ascending\", query.orderBy.children[1].nodeName);\r\n    assert.equal(\"lastName\", query.orderBy.children[1].children[0].children[1].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (orderBy: with ExpressionBuilder instance.)\"] = function() {\r\n    const expressionBuilder = new ExpressionBuilder();\r\n    const expression = expressionBuilder.property(\"firstName\");\r\n    let queryable = new Queryable();\r\n    queryable = queryable.orderBy(expression);\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.equal(\"ascending\", query.orderBy.children[0].nodeName);\r\n    assert.equal(\"firstName\", query.orderBy.children[0].children[0].children[1].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (orderBy: with the same expression called twice.)\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable = queryable\r\n        .orderBy(expBuilder => {\r\n            return expBuilder.property(\"firstName\");\r\n        })\r\n        .orderBy(expBuilder => {\r\n            return expBuilder.property(\"firstName\");\r\n        });\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.equal(1, query.orderBy.children.length);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (orderBy: w/o lambda or ExpressionBuilder instance)\"] = function() {\r\n    let queryable = new Queryable();\r\n\r\n    assert.throws(() => {\r\n        queryable = queryable.orderBy();\r\n    });\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (include: single)\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable = queryable.include(expBuilder => {\r\n        return expBuilder.property(\"firstName\");\r\n    });\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.equal(\"queryable\", query.include.children[0].nodeName);\r\n    assert.equal(\"firstName\", query.include.children[0].children[0].children[1].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (include: chain)\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable = queryable\r\n        .include(expBuilder => {\r\n            return expBuilder.property(\"firstName\");\r\n        })\r\n        .include(expBuilder => {\r\n            return expBuilder.property(\"lastName\");\r\n        });\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.equal(\"queryable\", query.include.children[0].nodeName);\r\n    assert.equal(\"firstName\", query.include.children[0].children[0].children[1].value);\r\n    assert.equal(\"queryable\", query.include.children[1].nodeName);\r\n    assert.equal(\"lastName\", query.include.children[1].children[0].children[1].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (include: with ExpressionBuilder instance.)\"] = function() {\r\n    const expressionBuilder = new ExpressionBuilder();\r\n    const expression = expressionBuilder.property(\"firstName\");\r\n    let queryable = new Queryable();\r\n    queryable = queryable.include(expression);\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.equal(\"queryable\", query.include.children[0].nodeName);\r\n    assert.equal(\"firstName\", query.include.children[0].children[0].children[1].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (include: w/o lambda or ExpressionBuilder instance)\"] = function() {\r\n    let queryable = new Queryable();\r\n\r\n    assert.throws(() => {\r\n        queryable = queryable.include();\r\n    });\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (take: value === number)\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable = queryable.take(10);\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.equal(10, query.take.children[0].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (take: value !== number)\"] = function() {\r\n    let queryable = new Queryable();\r\n    assert.throws(() => {\r\n        queryable = queryable.take();\r\n    });\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (skip: value === number)\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable = queryable.skip(10);\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.equal(10, query.skip.children[0].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (skip: value !== number)\"] = function() {\r\n    let queryable = new Queryable();\r\n    assert.throws(() => {\r\n        queryable = queryable.skip();\r\n    });\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (or: single)\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable = queryable.or(expBuilder => {\r\n        return expBuilder.property(\"firstName\").isEqualTo(\"Jared\");\r\n    });\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.equal(\"equalTo\", query.where.children[0].nodeName);\r\n    assert.equal(\"firstName\", query.where.children[0].children[0].children[1].value);\r\n    assert.equal(\"Jared\", query.where.children[0].children[1].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (or: chain)\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable = queryable\r\n        .or(expBuilder => {\r\n            return expBuilder.property(\"firstName\").isEqualTo(\"Jared\");\r\n        })\r\n        .or(expBuilder => {\r\n            return expBuilder.property(\"lastName\").isEqualTo(\"Barnes\");\r\n        });\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.equal(\"or\", query.where.children[0].nodeName);\r\n    assert.equal(\"equalTo\", query.where.children[0].children[0].nodeName);\r\n    assert.equal(\"firstName\", query.where.children[0].children[0].children[0].children[1].value);\r\n    assert.equal(\"Jared\", query.where.children[0].children[0].children[1].value);\r\n    assert.equal(\"equalTo\", query.where.children[0].children[1].nodeName);\r\n    assert.equal(\"lastName\", query.where.children[0].children[1].children[0].children[1].value);\r\n    assert.equal(\"Barnes\", query.where.children[0].children[1].children[1].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (or: with ExpressionBuilder instance.)\"] = function() {\r\n    const expressionBuilder = new ExpressionBuilder();\r\n    const expression = expressionBuilder.property(\"firstName\").isEqualTo(\"Jared\");\r\n    let queryable = new Queryable();\r\n    queryable = queryable.or(expression);\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.equal(\"equalTo\", query.where.children[0].nodeName);\r\n    assert.equal(\"firstName\", query.where.children[0].children[0].children[1].value);\r\n    assert.equal(\"Jared\", query.where.children[0].children[1].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (or: w/o lambda or ExpressionBuilder instance)\"] = function() {\r\n    let queryable = new Queryable();\r\n\r\n    assert.throws(() => {\r\n        queryable = queryable.or();\r\n    });\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (and: single)\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable = queryable.and(expBuilder => {\r\n        return expBuilder.property(\"firstName\").isEqualTo(\"Jared\");\r\n    });\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.equal(\"equalTo\", query.where.children[0].nodeName);\r\n    assert.equal(\"firstName\", query.where.children[0].children[0].children[1].value);\r\n    assert.equal(\"Jared\", query.where.children[0].children[1].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (orderByDesc: single)\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable = queryable.orderByDesc(expBuilder => {\r\n        return expBuilder.property(\"firstName\");\r\n    });\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.equal(\"descending\", query.orderBy.children[0].nodeName);\r\n    assert.equal(\"firstName\", query.orderBy.children[0].children[0].children[1].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (orderByDesc: chain)\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable = queryable\r\n        .orderByDesc(expBuilder => {\r\n            return expBuilder.property(\"firstName\");\r\n        })\r\n        .orderByDesc(expBuilder => {\r\n            return expBuilder.property(\"lastName\");\r\n        });\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.equal(\"descending\", query.orderBy.children[0].nodeName);\r\n    assert.equal(\"firstName\", query.orderBy.children[0].children[0].children[1].value);\r\n    assert.equal(\"descending\", query.orderBy.children[1].nodeName);\r\n    assert.equal(\"lastName\", query.orderBy.children[1].children[0].children[1].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (orderByDesc: with ExpressionBuilder instance.)\"] = function() {\r\n    const expressionBuilder = new ExpressionBuilder();\r\n    const expression = expressionBuilder.property(\"firstName\");\r\n    let queryable = new Queryable();\r\n    queryable = queryable.orderByDesc(expression);\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.equal(\"descending\", query.orderBy.children[0].nodeName);\r\n    assert.equal(\"firstName\", query.orderBy.children[0].children[0].children[1].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (orderByDesc: with the same expression called twice.)\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable = queryable\r\n        .orderByDesc(expBuilder => {\r\n            return expBuilder.property(\"firstName\");\r\n        })\r\n        .orderByDesc(expBuilder => {\r\n            return expBuilder.property(\"firstName\");\r\n        });\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.equal(1, query.orderBy.children.length);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (orderByDesc: w/o lambda or ExpressionBuilder instance)\"] = function() {\r\n    let queryable = new Queryable();\r\n\r\n    assert.throws(() => {\r\n        queryable = queryable.orderByDesc();\r\n    });\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (setParameters: obj passed in)\"] = function() {\r\n    let queryable = new Queryable();\r\n    const testParameters = { test1: 1, test2: 2 };\r\n    queryable = queryable.setParameters(testParameters);\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.deepEqual(testParameters, query.parameters);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (setParameters: w/o parameters passed in)\"] = function() {\r\n    let queryable = new Queryable();\r\n\r\n    assert.throws(() => {\r\n        queryable = queryable.setParameters();\r\n    });\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (withParameters: obj passed in)\"] = function() {\r\n    let queryable = new Queryable();\r\n    const testParameters = { test1: 1, test2: 2 };\r\n    queryable = queryable.withParameters(testParameters);\r\n\r\n    const query = queryable.getQuery();\r\n\r\n    assert.deepEqual(testParameters, query.parameters);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (withParameters: w/o parameters passed in)\"] = function() {\r\n    let queryable = new Queryable();\r\n\r\n    assert.throws(() => {\r\n        queryable = queryable.withParameters();\r\n    });\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (merge: merging queryable is empty)\"] = function() {\r\n    let queryable1 = new Queryable();\r\n    let queryable2 = new Queryable();\r\n    queryable2 = queryable2.merge(queryable1);\r\n\r\n    const query = queryable2.getQuery();\r\n\r\n    assert.equal(0, query.where.children.length);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (merge: queryable merging doesn't have anything to copy)\"] = function() {\r\n    let queryable1 = new Queryable();\r\n    let queryable2 = new Queryable();\r\n\r\n    queryable1 = queryable1.where(expBuilder => {\r\n        return expBuilder.property(\"firstName\").isEqualTo(\"Jared\");\r\n    });\r\n    queryable2 = queryable2.merge(queryable1);\r\n\r\n    const query = queryable2.getQuery();\r\n\r\n    assert.equal(\"equalTo\", query.where.children[0].nodeName);\r\n    assert.equal(\"firstName\", query.where.children[0].children[0].children[1].value);\r\n    assert.equal(\"Jared\", query.where.children[0].children[1].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (merge: queryable merging has a single where expression)\"] = function() {\r\n    let queryable1 = new Queryable();\r\n    let queryable2 = new Queryable();\r\n\r\n    queryable1 = queryable1.where(expBuilder => {\r\n        return expBuilder.property(\"firstName\").isEqualTo(\"Jared\");\r\n    });\r\n    queryable2 = queryable2\r\n        .where(expBuilder => {\r\n            return expBuilder.property(\"lastName\").isEqualTo(\"Barnes\");\r\n        })\r\n        .merge(queryable1);\r\n\r\n    const query = queryable2.getQuery();\r\n\r\n    assert.equal(\"and\", query.where.children[0].nodeName);\r\n    assert.equal(\"Barnes\", query.where.children[0].children[0].children[1].value);\r\n    assert.equal(\"Jared\", query.where.children[0].children[1].children[1].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (merge: queryable merging has a chained where expression)\"] = function() {\r\n    let queryable1 = new Queryable();\r\n    let queryable2 = new Queryable();\r\n\r\n    queryable1 = queryable1.where(expBuilder => {\r\n        return expBuilder.property(\"firstName\").isEqualTo(\"Jared\");\r\n    });\r\n    queryable2 = queryable2\r\n        .where(expBuilder => {\r\n            return expBuilder.property(\"lastName\").isEqualTo(\"Barnes\");\r\n        })\r\n        .where(expBuilder => {\r\n            return expBuilder.property(\"age\").isEqualTo(35);\r\n        })\r\n        .merge(queryable1);\r\n\r\n    const query = queryable2.getQuery();\r\n\r\n    assert.equal(\"and\", query.where.children[0].nodeName);\r\n    assert.equal(\"Barnes\", query.where.children[0].children[0].children[1].value);\r\n    assert.equal(35, query.where.children[0].children[1].children[1].value);\r\n    assert.equal(\"Jared\", query.where.children[0].children[2].children[1].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (merge: merging queryable has an include expression)\"] = function() {\r\n    let queryable1 = new Queryable();\r\n    let queryable2 = new Queryable();\r\n\r\n    queryable1 = queryable1.include(expBuilder => {\r\n        return expBuilder.property(\"firstName\");\r\n    });\r\n    queryable2 = queryable2.merge(queryable1);\r\n\r\n    const query = queryable2.getQuery();\r\n\r\n    assert.equal(\"firstName\", query.include.children[0].children[0].children[1].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (merge: merging queryable has an orderBy expression)\"] = function() {\r\n    let queryable1 = new Queryable();\r\n    let queryable2 = new Queryable();\r\n\r\n    queryable1 = queryable1.orderBy(expBuilder => {\r\n        return expBuilder.property(\"firstName\");\r\n    });\r\n    queryable2 = queryable2.merge(queryable1);\r\n\r\n    const query = queryable2.getQuery();\r\n\r\n    assert.equal(\"firstName\", query.orderBy.children[0].children[0].children[1].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (merge: merging queryable has the same orderBy expression as queryable merging)\"] = function() {\r\n    let queryable1 = new Queryable();\r\n    let queryable2 = new Queryable();\r\n\r\n    queryable1 = queryable1.orderBy(expBuilder => {\r\n        return expBuilder.property(\"firstName\");\r\n    });\r\n    queryable2 = queryable2\r\n        .orderBy(expBuilder => {\r\n            return expBuilder.property(\"firstName\");\r\n        })\r\n        .merge(queryable1);\r\n\r\n    const query = queryable2.getQuery();\r\n\r\n    assert.equal(1, query.orderBy.children.length);\r\n};\r\n\r\nexports[\"Queryable: Constructor with query (merge: w/o a queryable passed in)\"] = function() {\r\n    let queryable = new Queryable();\r\n\r\n    assert.throws(() => {\r\n        queryable = queryable.merge();\r\n    });\r\n};\r\n\r\nexports[\"Queryable: Constructor with toArrayAsync called.\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable.provider = { executeAsync: () => Promise.resolve([]) };\r\n\r\n    queryable.toArrayAsync().then(() => {\r\n        assert.ok(true);\r\n    });\r\n};\r\n\r\nexports[\"Queryable: Constructor with toArrayAsync method called w/o provider.\"] = function() {\r\n    let queryable = new Queryable();\r\n\r\n    assert.throws(() => {\r\n        queryable.toArrayAsync();\r\n    });\r\n};\r\n\r\nexports[\"Queryable: Constructor with toGuid called.\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable.provider = { executeAsync: () => Promise.resolve([]) };\r\n\r\n    const guidExpression = queryable.toGuid(12345);\r\n\r\n    assert.equal(12345, guidExpression.children[0].value);\r\n};\r\n\r\nexports[\"Queryable: Constructor with forEachAsync called.\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable.provider = { executeAsync: () => Promise.resolve([]) };\r\n\r\n    queryable.forEachAsync(() => {}).then(() => {\r\n        assert.ok(true);\r\n    });\r\n};\r\n\r\nexports[\"Queryable: Constructor with countAsync called.\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable.provider = { countAsync: queryable => Promise.resolve() };\r\n\r\n    queryable.countAsync().then(() => {\r\n        assert.ok(true);\r\n    });\r\n};\r\n\r\nexports[\"Queryable: Constructor with toArrayWithCountAsync called.\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable.provider = { toArrayWithCountAsync: queryable => Promise.resolve() };\r\n\r\n    queryable.toArrayWithCountAsync().then(() => {\r\n        assert.ok(true);\r\n    });\r\n};\r\n\r\nexports[\"Queryable: Constructor with allAsync called.\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable.provider = { allAsync: lambda => Promise.resolve() };\r\n\r\n    queryable.allAsync().then(() => {\r\n        assert.ok(true);\r\n    });\r\n};\r\n\r\nexports[\"Queryable: Constructor with anyAsync called.\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable.provider = { anyAsync: lambda => Promise.resolve() };\r\n\r\n    queryable.anyAsync().then(() => {\r\n        assert.ok(true);\r\n    });\r\n};\r\n\r\nexports[\"Queryable: Constructor with firstOrDefaultAsync called.\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable.provider = { firstOrDefaultAsync: lambda => Promise.resolve() };\r\n\r\n    queryable.firstOrDefaultAsync().then(() => {\r\n        assert.ok(true);\r\n    });\r\n};\r\n\r\nexports[\"Queryable: Constructor with firstAsync called.\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable.provider = { firstAsync: lambda => Promise.resolve() };\r\n\r\n    queryable.firstAsync().then(() => {\r\n        assert.ok(true);\r\n    });\r\n};\r\n\r\nexports[\"Queryable: Constructor with lastAsync called.\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable.provider = { lastAsync: lambda => Promise.resolve() };\r\n\r\n    queryable.lastAsync().then(() => {\r\n        assert.ok(true);\r\n    });\r\n};\r\n\r\nexports[\"Queryable: Constructor with selectAsync called.\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable.provider = { selectAsync: lambda => Promise.resolve() };\r\n\r\n    queryable.selectAsync().then(() => {\r\n        assert.ok(true);\r\n    });\r\n};\r\n\r\nexports[\"Queryable: Constructor with containsAsync called.\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable.provider = { containsAsync: lambda => Promise.resolve() };\r\n\r\n    queryable.containsAsync().then(() => {\r\n        assert.ok(true);\r\n    });\r\n};\r\n\r\nexports[\"Queryable: Constructor with ifNone called (with value === 0)\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable.provider = { countAsync: lambda => Promise.resolve(0) };\r\n\r\n    queryable.ifNone(() => assert.ok(true));\r\n};\r\n\r\nexports[\"Queryable: Constructor with ifNone called (with value === 1)\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable.provider = { countAsync: lambda => Promise.resolve(1) };\r\n\r\n    queryable.ifNone();\r\n    assert.ok(true);\r\n};\r\n\r\nexports[\"Queryable: Constructor with ifAny called (with value.length === 0)\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable.provider = { executeAsync: lambda => Promise.resolve([]) };\r\n\r\n    queryable.ifAny();\r\n    assert.ok(true);\r\n};\r\n\r\nexports[\"Queryable: Constructor with ifAny called (with value.length === 1)\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable.provider = { executeAsync: lambda => Promise.resolve([\"item\"]) };\r\n\r\n    queryable.ifAny(() => {\r\n        assert.ok(true);\r\n    });\r\n};\r\n\r\nexports[\"Queryable: Constructor with intersects called with queryable passed in.\"] = function() {\r\n    let queryable1 = new Queryable();\r\n    let queryable2 = new Queryable();\r\n    queryable1.provider = { intersectsAsync: () => Promise.resolve() };\r\n\r\n    queryable1.intersectsAsync(queryable2).then(() => {\r\n        assert.ok(true);\r\n    });\r\n};\r\n\r\nexports[\"Queryable: Constructor with intersects called with array passed in.\"] = function() {\r\n    let queryable = new Queryable();\r\n    queryable.provider = { intersectsAsync: () => Promise.resolve() };\r\n\r\n    Array.prototype.asQueryable = () => {\r\n        return;\r\n    };\r\n\r\n    let compareToQueryable = [];\r\n\r\n    queryable.intersectsAsync(compareToQueryable).then(() => {\r\n        assert.ok(true);\r\n    });\r\n};\r\n\r\nexports[\"Queryable: Constructor with ofType called.\"] = function() {\r\n    let queryable = new Queryable();\r\n    const testType = { test: \"test\" };\r\n    queryable = queryable.ofType(testType);\r\n    assert.deepEqual(queryable.Type, testType);\r\n};\r\n\r\nexports[\"Queryable: Constructor with ofType called.\"] = function() {\r\n    let queryable = new Queryable();\r\n    const testType = { test: \"test\" };\r\n    queryable = queryable.ofType(testType);\r\n    assert.deepEqual(queryable.Type, testType);\r\n};\r\n\r\nexports[\"Queryable: Constructor with copy called.\"] = function() {\r\n    let queryable = new Queryable();\r\n    let copiedQueryable = queryable.copy();\r\n\r\n    assert.deepEqual(queryable, copiedQueryable);\r\n};\r\n"]}