{"version":3,"sources":["../../src/query/ExpressionBuilder.js"],"names":["returnExpression","expression","OperationExpressionBuilder","getLeftExpression","fn","expressionBuilder","ExpressionBuilder","any","propertyAccessExpression","Object","queryable","where","all","value","constant","getExpressionType","equalTo","notEqualTo","substringOf","array","Array","isArray","isIn","Error","isNotIn","console","warn","string","greaterThan","greaterThanOrEqualTo","lessThanOrEqualTo","lessThan","endsWith","startsWith","propertyAccess","Type","property","type","and","apply","arguments","or","filter","setExpression"],"mappings":"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","file":"ExpressionBuilder.js","sourcesContent":["import { Expression } from \"./Expression\";\r\n\r\nconst returnExpression = () => {\r\n    return expression;\r\n};\r\n\r\nclass OperationExpressionBuilder {\r\n    constructor(getLeftExpression) {\r\n        this.getLeftExpression = getLeftExpression || returnExpression;\r\n    }\r\n\r\n    any(fn) {\r\n        var expressionBuilder = new ExpressionBuilder();\r\n        var expression = fn(expressionBuilder);\r\n        return Expression.any(this.getLeftExpression(), expression);\r\n    }\r\n\r\n    where(fn) {\r\n        var propertyAccessExpression = this.getLeftExpression();\r\n\r\n        this.getLeftExpression = function() {\r\n            var expressionBuilder = new ExpressionBuilder(Object);\r\n            var expression = fn(expressionBuilder);\r\n\r\n            return Expression.queryable(propertyAccessExpression, Expression.expression(Expression.where(expression)));\r\n        };\r\n\r\n        return this;\r\n    }\r\n\r\n    all(fn) {\r\n        var expressionBuilder = new ExpressionBuilder();\r\n        var expression = fn(expressionBuilder);\r\n        return Expression.all(this.getLeftExpression(), expression);\r\n    }\r\n\r\n    isEqualTo(value) {\r\n        var constant = Expression.getExpressionType(value);\r\n        return Expression.equalTo(this.getLeftExpression(), constant);\r\n    }\r\n\r\n    isNotEqualTo(value) {\r\n        var constant = Expression.getExpressionType(value);\r\n        return Expression.notEqualTo(this.getLeftExpression(), constant);\r\n    }\r\n\r\n    contains(value) {\r\n        var constant = Expression.getExpressionType(value);\r\n        return Expression.substringOf(this.getLeftExpression(), constant);\r\n    }\r\n\r\n    isIn(array) {\r\n        if (Array.isArray(array)) {\r\n            return Expression.isIn(this.getLeftExpression(), Expression.array(array));\r\n        } else {\r\n            throw new Error(\"isIn is expecting to be passed an array!\");\r\n        }\r\n    }\r\n\r\n    isNotIn(array) {\r\n        if (Array.isArray(array)) {\r\n            return Expression.isNotIn(this.getLeftExpression(), Expression.array(array));\r\n        } else {\r\n            throw new Error(\"isNotIn is expecting to be passed an array!\");\r\n        }\r\n    }\r\n\r\n    isSubstringOf(value) {\r\n        console.warn(\"isSubstringOf is deprecated, please us contains.\");\r\n        return Expression.substringOf(this.getLeftExpression(), Expression.string(value));\r\n    }\r\n\r\n    isGreaterThan(value) {\r\n        var constant = Expression.getExpressionType(value);\r\n        return Expression.greaterThan(this.getLeftExpression(), constant);\r\n    }\r\n\r\n    isGreaterThanOrEqualTo(value) {\r\n        var constant = Expression.getExpressionType(value);\r\n        return Expression.greaterThanOrEqualTo(this.getLeftExpression(), constant);\r\n    }\r\n\r\n    isLessThanOrEqualTo(value) {\r\n        var constant = Expression.getExpressionType(value);\r\n        return Expression.lessThanOrEqualTo(this.getLeftExpression(), constant);\r\n    }\r\n\r\n    isLessThan(value) {\r\n        var constant = Expression.getExpressionType(value);\r\n        return Expression.lessThan(this.getLeftExpression(), constant);\r\n    }\r\n\r\n    endsWith(value) {\r\n        return Expression.endsWith(this.getLeftExpression(), Expression.string(value));\r\n    }\r\n\r\n    startsWith(value) {\r\n        return Expression.startsWith(this.getLeftExpression(), Expression.string(value));\r\n    }\r\n\r\n    property(value) {\r\n        return new OperationExpressionBuilder(function() {\r\n            return Expression.propertyAccess(this.getLeftExpression(), value);\r\n        });\r\n    }\r\n\r\n    getExpression() {\r\n        return this.getLeftExpression();\r\n    }\r\n}\r\n\r\nclass ExpressionBuilder {\r\n    constructor(Type) {\r\n        this.Type = Type || Object;\r\n    }\r\n    property(property) {\r\n        return new OperationExpressionBuilder(function() {\r\n            return Expression.propertyAccess(Expression.type(this.Type), property);\r\n        });\r\n    }\r\n\r\n    and() {\r\n        return Expression.and.apply(Expression, arguments);\r\n    }\r\n\r\n    or() {\r\n        return Expression.or.apply(Expression, arguments);\r\n    }\r\n\r\n    any(filter) {\r\n        var expressionBuilder = new ExpressionBuilder();\r\n        var expression = filter(expressionBuilder);\r\n        return setExpression(Expression.any(\"\", expression));\r\n    }\r\n\r\n    all(filter) {\r\n        var expressionBuilder = new ExpressionBuilder();\r\n        var expression = filter(expressionBuilder);\r\n        return setExpression(Expression.all(\"\", expression));\r\n    }\r\n\r\n    value() {\r\n        return new OperationExpressionBuilder(function() {\r\n            return Expression.type(this.Type);\r\n        });\r\n    }\r\n}\r\n\r\nexport { ExpressionBuilder, OperationExpressionBuilder };\r\n"]}