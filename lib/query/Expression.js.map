{"version":3,"sources":["../../src/query/Expression.js"],"names":["Expression","nodeName","Error","value","string","number","boolean","Array","isArray","array","Date","date","object","ValueExpression","expression","Object","leftExpression","rightExpression","OperationExpression","children","push","prototype","slice","call","arguments","forEach","arg","valueExpression","constant","name","args","property","propertyAccessExpression","anyExpression","expressionExpression","allExpression","expresssionExpression","propertyName","propertyExpression","Type","namespace","containsExpression","ofTypeExpression","intersectsExpression","node","isEqualTo","copy","length","every","index","matched","childNode","contains","some","matchedNodes","getMatchingNodes"],"mappings":";;;;;;;;;;;;;;IAAMA,U;AACF,0BAAc;AAAA;;AACV,aAAKC,QAAL,GAAgB,YAAhB;AACH;;;;+BAEM;AACH,kBAAM,IAAIC,KAAJ,CAAU,uBAAV,CAAN;AACH;;;oCAEW;AACR,kBAAM,IAAIA,KAAJ,CAAU,uBAAV,CAAN;AACH;;;0CAEwBC,K,EAAO;AAC5B,gBAAIA,iBAAiBH,UAArB,EAAiC;AAC7B,uBAAOG,KAAP;AACH;;AAED,gBAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC3B,uBAAOH,WAAWI,MAAX,CAAkBD,KAAlB,CAAP;AACH,aAFD,MAEO,IAAI,OAAOA,KAAP,KAAiB,UAArB,EAAiC;AACpC,uBAAOH,WAAW,UAAX,EAAuBG,KAAvB,CAAP;AACH,aAFM,MAEA,IAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAClC,uBAAOH,WAAWK,MAAX,CAAkBF,KAAlB,CAAP;AACH,aAFM,MAEA,IAAI,OAAOA,KAAP,KAAiB,SAArB,EAAgC;AACnC,uBAAOH,WAAWM,OAAX,CAAmBH,KAAnB,CAAP;AACH,aAFM,MAEA,IAAIA,UAAU,IAAd,EAAoB;AACvB,uBAAOH,WAAW,MAAX,EAAmBG,KAAnB,CAAP;AACA,uBAAOH,WAAW,WAAX,EAAwBG,KAAxB,CAAP;AACH,aAHM,MAGA,IAAII,MAAMC,OAAN,CAAcL,KAAd,CAAJ,EAA0B;AAC7B,uBAAOH,WAAWS,KAAX,CAAiBN,KAAjB,CAAP;AACH,aAFM,MAEA,IAAIA,iBAAiBO,IAArB,EAA2B;AAC9B,uBAAOV,WAAWW,IAAX,CAAgBR,KAAhB,CAAP;AACH,aAFM,MAEA;AACH,uBAAOH,WAAWY,MAAX,CAAkBT,KAAlB,CAAP;AACH;AACJ;;;iCAEeA,K,EAAO;AACnB,mBAAO,IAAIU,eAAJ,CAAoB,UAApB,EAAgCV,KAAhC,CAAP;AACH;;;iCAEeA,K,EAAO;AACnB,mBAAO,IAAIU,eAAJ,CAAoB,UAApB,EAAgCV,KAAhC,CAAP;AACH;;;gCAEcA,K,EAAO;AAClB,gBAAIW,aAAa,IAAID,eAAJ,CAAoB,SAApB,CAAjB;AACAC,uBAAWX,KAAX,GAAmBA,KAAnB;AACA,mBAAOW,UAAP;AACH;;;+BAEaX,K,EAAO;AACjB,gBAAIW,aAAa,IAAID,eAAJ,CAAoB,QAApB,CAAjB;AACAC,uBAAWX,KAAX,GAAmBA,KAAnB;AACA,mBAAOW,UAAP;AACH;;;+BAEaX,K,EAAO;AACjB,gBAAIW,aAAa,IAAID,eAAJ,CAAoB,QAApB,CAAjB;AACAC,uBAAWX,KAAX,GAAmBA,KAAnB;AACA,mBAAOW,UAAP;AACH;;;+BAEaX,K,EAAO;AACjB,gBAAIW,aAAa,IAAID,eAAJ,CAAoB,QAApB,CAAjB;AACAC,uBAAWX,KAAX,GAAmBA,KAAnB;AACA,mBAAOW,UAAP;AACH;;;6BAEWX,K,EAAO;AACf,gBAAIW,aAAa,IAAID,eAAJ,CAAoB,MAApB,CAAjB;AACAC,uBAAWX,KAAX,GAAmBA,KAAnB;AACA,mBAAOW,UAAP;AACH;;;kCAEeX,K,EAAO;AACnB,gBAAIW,aAAa,IAAID,eAAJ,CAAoB,UAApB,CAAjB;AACAC,uBAAWX,KAAX,GAAmBA,KAAnB;AACA,mBAAOW,UAAP;AACH;;;6BAEWX,K,EAAO;AACf,gBAAIW,aAAa,IAAID,eAAJ,CAAoB,MAApB,CAAjB;AACAC,uBAAWX,KAAX,GAAmBA,SAASY,MAA5B;AACA,mBAAOD,UAAP;AACH;;;8BAEWX,K,EAAO;AACf,gBAAIW,aAAa,IAAID,eAAJ,CAAoB,MAApB,CAAjB;AACAC,uBAAWX,KAAX,GAAmBA,KAAnB;AACA,mBAAOW,UAAP;AACH;;;kCAEgBX,K,EAAO;AACpB,gBAAIW,aAAa,IAAID,eAAJ,CAAoB,WAApB,CAAjB;AACAC,uBAAWX,KAAX,GAAmBA,KAAnB;AACA,mBAAOW,UAAP;AACH;;;8BAEYX,K,EAAO;AAChB,gBAAIW,aAAa,IAAID,eAAJ,CAAoB,OAApB,CAAjB;AACAC,uBAAWX,KAAX,GAAmBA,KAAnB;AACA,mBAAOW,UAAP;AACH;;;kCAEgBE,c,EAAgBC,e,EAAiB;AAC9C,gBAAIH,aAAa,IAAII,mBAAJ,CAAwB,WAAxB,CAAjB;AACAJ,uBAAWK,QAAX,CAAoBC,IAApB,CAAyBJ,cAAzB,EAAyCC,eAAzC;AACA,mBAAOH,UAAP;AACH;;AAED;AACA;AACA;;;;kCAEiB;AACb,gBAAIA,aAAa,IAAII,mBAAJ,CAAwB,SAAxB,CAAjB;AACAX,kBAAMc,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,EAAsC,CAAtC,EAAyCC,OAAzC,CAAiD,eAAO;AACpDX,2BAAWK,QAAX,CAAoBC,IAApB,CAAyBM,GAAzB;AACH,aAFD;AAGA,mBAAOZ,UAAP;AACH;;;qCAEmB;AAChB,gBAAIA,aAAa,IAAII,mBAAJ,CAAwB,YAAxB,CAAjB;AACAX,kBAAMc,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,EAAsC,CAAtC,EAAyCC,OAAzC,CAAiD,eAAO;AACpDX,2BAAWK,QAAX,CAAoBC,IAApB,CAAyBM,GAAzB;AACH,aAFD;AAGA,mBAAOZ,UAAP;AACH;;;6BAEW;AACR,gBAAIA,aAAa,IAAII,mBAAJ,CAAwB,IAAxB,CAAjB;AACAX,kBAAMc,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,EAAsC,CAAtC,EAAyCC,OAAzC,CAAiD,eAAO;AACpDX,2BAAWK,QAAX,CAAoBC,IAApB,CAAyBM,GAAzB;AACH,aAFD;AAGA,mBAAOZ,UAAP;AACH;;;8BAEY;AACT,gBAAIA,aAAa,IAAII,mBAAJ,CAAwB,KAAxB,CAAjB;AACAX,kBAAMc,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,EAAsC,CAAtC,EAAyCC,OAAzC,CAAiD,eAAO;AACpDX,2BAAWK,QAAX,CAAoBC,IAApB,CAAyBM,GAAzB;AACH,aAFD;AAGA,mBAAOZ,UAAP;AACH;;;gCAEc;AACX,gBAAIA,aAAa,IAAII,mBAAJ,CAAwB,OAAxB,CAAjB;AACAX,kBAAMc,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,EAAsC,CAAtC,EAAyCC,OAAzC,CAAiD,eAAO;AACpDX,2BAAWK,QAAX,CAAoBC,IAApB,CAAyBM,GAAzB;AACH,aAFD;AAGA,mBAAOZ,UAAP;AACH;;;sCAEoB;AACjB,gBAAIA,aAAa,IAAII,mBAAJ,CAAwB,aAAxB,CAAjB;AACAX,kBAAMc,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,EAAsC,CAAtC,EAAyCC,OAAzC,CAAiD,eAAO;AACpDX,2BAAWK,QAAX,CAAoBC,IAApB,CAAyBM,GAAzB;AACH,aAFD;AAGA,mBAAOZ,UAAP;AACH;;;mCAEiB;AACd,gBAAIA,aAAa,IAAII,mBAAJ,CAAwB,UAAxB,CAAjB;AACAX,kBAAMc,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,EAAsC,CAAtC,EAAyCC,OAAzC,CAAiD,eAAO;AACpDX,2BAAWK,QAAX,CAAoBC,IAApB,CAAyBM,GAAzB;AACH,aAFD;AAGA,mBAAOZ,UAAP;AACH;;;+CAE6B;AAC1B,gBAAIA,aAAa,IAAII,mBAAJ,CAAwB,sBAAxB,CAAjB;AACAX,kBAAMc,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,EAAsC,CAAtC,EAAyCC,OAAzC,CAAiD,eAAO;AACpDX,2BAAWK,QAAX,CAAoBC,IAApB,CAAyBM,GAAzB;AACH,aAFD;AAGA,mBAAOZ,UAAP;AACH;;;4CAE0B;AACvB,gBAAIA,aAAa,IAAII,mBAAJ,CAAwB,mBAAxB,CAAjB;AACAX,kBAAMc,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,EAAsC,CAAtC,EAAyCC,OAAzC,CAAiD,eAAO;AACpDX,2BAAWK,QAAX,CAAoBC,IAApB,CAAyBM,GAAzB;AACH,aAFD;AAGA,mBAAOZ,UAAP;AACH;;;kCAEgB;AACb,gBAAIA,aAAa,IAAII,mBAAJ,CAAwB,SAAxB,CAAjB;AACAX,kBAAMc,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,EAAsC,CAAtC,EAAyCC,OAAzC,CAAiD,eAAO;AACpDX,2BAAWK,QAAX,CAAoBC,IAApB,CAAyBM,GAAzB;AACH,aAFD;AAGA,mBAAOZ,UAAP;AACH;;;qCAEmB;AAChB,gBAAIA,aAAa,IAAII,mBAAJ,CAAwB,YAAxB,CAAjB;AACAX,kBAAMc,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,EAAsC,CAAtC,EAAyCC,OAAzC,CAAiD,eAAO;AACpDX,2BAAWK,QAAX,CAAoBC,IAApB,CAAyBM,GAAzB;AACH,aAFD;AAGA,mBAAOZ,UAAP;AACH;;;oCAEkB;AACf,gBAAIA,aAAa,IAAII,mBAAJ,CAAwB,WAAxB,CAAjB;AACAX,kBAAMc,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,EAAsC,CAAtC,EAAyCC,OAAzC,CAAiD,eAAO;AACpDX,2BAAWK,QAAX,CAAoBC,IAApB,CAAyBM,GAAzB;AACH,aAFD;AAGA,mBAAOZ,UAAP;AACH;;;6BAEWX,K,EAAO;AACf,gBAAIW,aAAa,IAAII,mBAAJ,CAAwB,MAAxB,CAAjB;AACA,gBAAIS,kBAAkB3B,WAAW4B,QAAX,CAAoBzB,KAApB,CAAtB;AACAW,uBAAWK,QAAX,CAAoBC,IAApB,CAAyBO,eAAzB;;AAEA,mBAAOb,UAAP;AACH;;;6BAEWX,K,EAAO;AACf,gBAAIW,aAAa,IAAII,mBAAJ,CAAwB,MAAxB,CAAjB;AACA,gBAAIS,kBAAkB3B,WAAW4B,QAAX,CAAoBzB,KAApB,CAAtB;AACAW,uBAAWK,QAAX,CAAoBC,IAApB,CAAyBO,eAAzB;;AAEA,mBAAOb,UAAP;AACH;;;gDAE8Be,I,EAAM;AACjC,gBAAIf,aAAa,IAAII,mBAAJ,CAAwBW,IAAxB,CAAjB;AACA,gBAAIC,OAAOvB,MAAMc,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,EAAsC,CAAtC,CAAX;AACAM,iBAAKL,OAAL,CAAa,eAAO;AAChBX,2BAAWK,QAAX,CAAoBC,IAApB,CAAyBM,GAAzB;AACH,aAFD;;AAIA,mBAAOZ,UAAP;AACH;;;+BAEa;AACV,gBAAIA,aAAa,IAAII,mBAAJ,CAAwB,MAAxB,CAAjB;AACAX,kBAAMc,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,EAAsC,CAAtC,EAAyCC,OAAzC,CAAiD,eAAO;AACpDX,2BAAWK,QAAX,CAAoBC,IAApB,CAAyBM,GAAzB;AACH,aAFD;AAGA,mBAAOZ,UAAP;AACH;;;oCAEkB;AACf,gBAAIA,aAAa,IAAII,mBAAJ,CAAwB,WAAxB,CAAjB;AACAX,kBAAMc,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,EAAsC,CAAtC,EAAyCC,OAAzC,CAAiD,eAAO;AACpDX,2BAAWK,QAAX,CAAoBC,IAApB,CAAyBM,GAAzB;AACH,aAFD;AAGA,mBAAOZ,UAAP;AACH;;;sCAEoB;AACjB,gBAAIA,aAAa,IAAII,mBAAJ,CAAwB,aAAxB,CAAjB;AACAX,kBAAMc,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,EAAsC,CAAtC,EAAyCC,OAAzC,CAAiD,eAAO;AACpDX,2BAAWK,QAAX,CAAoBC,IAApB,CAAyBM,GAAzB;AACH,aAFD;AAGA,mBAAOZ,UAAP;AACH;;;qCAEmB;AAChB,gBAAIA,aAAa,IAAII,mBAAJ,CAAwB,YAAxB,CAAjB;AACAX,kBAAMc,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,EAAsC,CAAtC,EAAyCC,OAAzC,CAAiD,eAAO;AACpDX,2BAAWK,QAAX,CAAoBC,IAApB,CAAyBM,GAAzB;AACH,aAFD;AAGA,mBAAOZ,UAAP;AACH;;;mCAEiB;AACd,gBAAIA,aAAa,IAAII,mBAAJ,CAAwB,UAAxB,CAAjB;AACAX,kBAAMc,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,EAAsC,CAAtC,EAAyCC,OAAzC,CAAiD,eAAO;AACpDX,2BAAWK,QAAX,CAAoBC,IAApB,CAAyBM,GAAzB;AACH,aAFD;AAGA,mBAAOZ,UAAP;AACH;;;6BAEWiB,Q,EAAUtB,K,EAAO;AACzB,gBAAIK,aAAa,IAAII,mBAAJ,CAAwB,MAAxB,CAAjB;AACAX,kBAAMc,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,EAAsC,CAAtC,EAAyCC,OAAzC,CAAiD,eAAO;AACpDX,2BAAWK,QAAX,CAAoBC,IAApB,CAAyBM,GAAzB;AACH,aAFD;AAGA,mBAAOZ,UAAP;AACH;;;gCAEciB,Q,EAAUtB,K,EAAO;AAC5B,gBAAIK,aAAa,IAAII,mBAAJ,CAAwB,SAAxB,CAAjB;AACAX,kBAAMc,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,EAAsC,CAAtC,EAAyCC,OAAzC,CAAiD,eAAO;AACpDX,2BAAWK,QAAX,CAAoBC,IAApB,CAAyBM,GAAzB;AACH,aAFD;AAGA,mBAAOZ,UAAP;AACH;;;kCAEgB;AACb,gBAAIA,aAAa,IAAII,mBAAJ,CAAwB,SAAxB,CAAjB;AACAX,kBAAMc,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,EAAsC,CAAtC,EAAyCC,OAAzC,CAAiD,eAAO;AACpDX,2BAAWK,QAAX,CAAoBC,IAApB,CAAyBM,GAAzB;AACH,aAFD;AAGA,mBAAOZ,UAAP;AACH;;;4BAEUkB,wB,EAA0BlB,U,EAAY;AAC7C,gBAAImB,gBAAgB,IAAIf,mBAAJ,CAAwB,KAAxB,CAApB;AACA,gBAAIgB,uBAAuBlC,WAAWc,UAAX,CAAsBA,UAAtB,CAA3B;;AAEAmB,0BAAcd,QAAd,CAAuBC,IAAvB,CAA4BY,wBAA5B,EAAsDE,oBAAtD;AACA,mBAAOD,aAAP;AACH;;;4BAEUD,wB,EAA0BlB,U,EAAY;AAC7C,gBAAIqB,gBAAgB,IAAIjB,mBAAJ,CAAwB,KAAxB,CAApB;AACA,gBAAIgB,uBAAuBlC,WAAWc,UAAX,CAAsBA,UAAtB,CAA3B;;AAEAqB,0BAAchB,QAAd,CAAuBC,IAAvB,CAA4BY,wBAA5B,EAAsDE,oBAAtD;AACA,mBAAOC,aAAP;AACH;;;mCAEiBhC,K,EAAO;AACrB,gBAAIiC,wBAAwB,IAAIvB,eAAJ,CAAoB,YAApB,EAAkCV,KAAlC,CAA5B;;AAEA,mBAAOiC,qBAAP;AACH;;;uCAEqBpB,c,EAAgBqB,Y,EAAc;AAChD,gBAAIC,qBAAqBtC,WAAW+B,QAAX,CAAoBM,YAApB,CAAzB;AACA,gBAAIL,2BAA2B,IAAId,mBAAJ,CAAwB,gBAAxB,CAA/B;AACAc,qCAAyBb,QAAzB,CAAkCC,IAAlC,CAAuCJ,cAAvC,EAAuDsB,kBAAvD;;AAEA,mBAAON,wBAAP;AACH;;;iCAEeO,I,EAAMC,S,EAAW1B,U,EAAY;AACzC,gBAAI2B,qBAAqB,IAAIvB,mBAAJ,CAAwB,UAAxB,CAAzB;AACA,gBAAIwB,mBAAmB,IAAI7B,eAAJ,CAAoB,QAApB,EAA8B0B,IAA9B,CAAvB;AACA,gBAAID,qBAAqB,IAAIzB,eAAJ,CAAoB,UAApB,EAAgC2B,SAAhC,CAAzB;;AAEAC,+BAAmBtB,QAAnB,CAA4BC,IAA5B,CAAiCsB,gBAAjC,EAAmDJ,kBAAnD,EAAuExB,UAAvE;;AAEA,mBAAO2B,kBAAP;AACH;;;mCAEiBF,I,EAAMC,S,EAAW1B,U,EAAY;AAC3C,gBAAI6B,uBAAuB,IAAIzB,mBAAJ,CAAwB,YAAxB,CAA3B;AACA,gBAAIwB,mBAAmB,IAAI7B,eAAJ,CAAoB,QAApB,EAA8B0B,IAA9B,CAAvB;AACA,gBAAID,qBAAqB,IAAIzB,eAAJ,CAAoB,UAApB,EAAgC2B,SAAhC,CAAzB;;AAEAG,iCAAqBxB,QAArB,CAA8BC,IAA9B,CAAmCsB,gBAAnC,EAAqDJ,kBAArD,EAAyExB,UAAzE;;AAEA,mBAAO6B,oBAAP;AACH;;;;;;IAGC9B,e;;;AACF,6BAAYZ,QAAZ,EAAsBE,KAAtB,EAA6B;AAAA;;AAAA;;AAEzB,cAAKA,KAAL,GAAaA,KAAb;AACA,cAAKF,QAAL,GAAgBA,QAAhB;AAHyB;AAI5B;;;;+BAEM;AACH,mBAAO,IAAIY,eAAJ,CAAoB,KAAKZ,QAAzB,EAAmC,KAAKE,KAAxC,CAAP;AACH;;;kCAESyC,I,EAAM;AACZ,gBAAIA,QAAQ,KAAK3C,QAAL,KAAkB2C,KAAK3C,QAA/B,IAA2C,KAAKE,KAAL,KAAeyC,KAAKzC,KAAnE,EAA0E;AACtE,uBAAO,IAAP;AACH;AACD,mBAAO,KAAP;AACH;;;iCAEQyC,I,EAAM;AACX,mBAAO,KAAKC,SAAL,CAAeD,IAAf,CAAP;AACH;;;;EApByB5C,U;;IAuBxBkB,mB;;;AACF,iCAAYjB,QAAZ,EAAsB;AAAA;;AAAA;;AAElB,YAAI6B,OAAOvB,MAAMc,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,EAAsC,CAAtC,CAAX;;AAEA,eAAKvB,QAAL,GAAgBA,QAAhB;AACA,eAAKkB,QAAL,GAAgBW,KAAKR,KAAL,CAAW,CAAX,CAAhB;AALkB;AAMrB;;;;+BACM;AACH,gBAAIH,WAAW,EAAf;AACA,gBAAI2B,OAAO,IAAI5B,mBAAJ,CAAwB,KAAKjB,QAA7B,CAAX;;AAEA,iBAAKkB,QAAL,CAAcM,OAAd,CAAsB,sBAAc;AAChCqB,qBAAK3B,QAAL,CAAcC,IAAd,CAAmBN,WAAWgC,IAAX,EAAnB;AACH,aAFD;;AAIA,mBAAOA,IAAP;AACH;;;oCAEW;AACR,gBAAI,CAACvC,MAAMC,OAAN,CAAcoC,KAAKzB,QAAnB,CAAD,IAAiC,KAAKlB,QAAL,KAAkB2C,KAAK3C,QAA5D,EAAsE;AAClE,uBAAO,KAAP;AACH;;AAED,gBAAI2C,KAAKzB,QAAL,CAAc4B,MAAd,KAAyB,KAAK5B,QAAL,CAAc4B,MAA3C,EAAmD;AAC/C,uBAAO,KAAP;AACH;;AAED,mBAAO,KAAK5B,QAAL,CAAc6B,KAAd,CAAoB,UAAClC,UAAD,EAAamC,KAAb,EAAuB;AAC9C,uBAAOnC,WAAW+B,SAAX,CAAqBD,KAAKzB,QAAL,CAAc8B,KAAd,CAArB,CAAP;AACH,aAFM,CAAP;AAGH;;;iCAEQL,I,EAAM;AAAA;;AACX,gBAAIA,KAAK3C,QAAL,KAAkB,KAAKA,QAAvB,IAAmCM,MAAMC,OAAN,CAAcoC,KAAKzB,QAAnB,CAAvC,EAAqE;AACjE,oBAAI+B,UAAUN,KAAKzB,QAAL,CAAc6B,KAAd,CAAoB,UAACG,SAAD,EAAYF,KAAZ,EAAsB;AACpD,2BAAOE,UAAUC,QAAV,CAAmB,OAAKjC,QAAL,CAAc8B,KAAd,CAAnB,CAAP;AACH,iBAFa,CAAd;;AAIA,oBAAIC,OAAJ,EAAa;AACT,2BAAO,IAAP;AACH;AACJ;;AAED,mBAAO,KAAK/B,QAAL,CAAckC,IAAd,CAAmB,qBAAa;AACnC,uBAAOF,UAAUC,QAAV,CAAmBR,IAAnB,CAAP;AACH,aAFM,CAAP;AAGH;;;yCAEgBA,I,EAAMU,Y,EAAc;AAAA;;AACjCA,2BAAe/C,MAAMC,OAAN,CAAc8C,YAAd,IAA8BA,YAA9B,GAA6C,EAA5D;;AAEA,gBAAIV,KAAK3C,QAAL,KAAkB,KAAKA,QAAvB,IAAmCM,MAAMC,OAAN,CAAcoC,KAAKzB,QAAnB,CAAvC,EAAqE;AACjE,oBAAI+B,UAAUN,KAAKzB,QAAL,CAAc6B,KAAd,CAAoB,UAACG,SAAD,EAAYF,KAAZ,EAAsB;AACpD,2BAAOE,UAAUC,QAAV,CAAmB,OAAKjC,QAAL,CAAc8B,KAAd,CAAnB,EAAyCK,YAAzC,CAAP;AACH,iBAFa,CAAd;;AAIA,oBAAIJ,OAAJ,EAAa;AACTI,iCAAalC,IAAb,CAAkB,IAAlB;AACH;AACJ;;AAED,iBAAKD,QAAL,CAAcM,OAAd,CAAsB,qBAAa;AAC/B,oBAAIlB,MAAMC,OAAN,CAAc2C,UAAUhC,QAAxB,CAAJ,EAAuC;AACnCgC,8BAAUI,gBAAV,CAA2BX,IAA3B,EAAiCU,YAAjC;AACH;AACJ,aAJD,EAIGA,YAJH;;AAMA,mBAAOA,YAAP;AACH;;;;EArE6BtD,U;;QAwEzBA,U,GAAAA,U;QAAYa,e,GAAAA,e;QAAiBK,mB,GAAAA,mB","file":"Expression.js","sourcesContent":["class Expression {\r\n    constructor() {\r\n        this.nodeName = \"expression\";\r\n    }\r\n\r\n    copy() {\r\n        throw new Error(\"Meant to be overriden\");\r\n    }\r\n\r\n    isEqualTo() {\r\n        throw new Error(\"Meant to be overriden\");\r\n    }\r\n\r\n    static getExpressionType(value) {\r\n        if (value instanceof Expression) {\r\n            return value;\r\n        }\r\n\r\n        if (typeof value === \"string\") {\r\n            return Expression.string(value);\r\n        } else if (typeof value === \"function\") {\r\n            return Expression[\"function\"](value);\r\n        } else if (typeof value === \"number\") {\r\n            return Expression.number(value);\r\n        } else if (typeof value === \"boolean\") {\r\n            return Expression.boolean(value);\r\n        } else if (value === null) {\r\n            return Expression[\"null\"](value);\r\n            return Expression[\"undefined\"](value);\r\n        } else if (Array.isArray(value)) {\r\n            return Expression.array(value);\r\n        } else if (value instanceof Date) {\r\n            return Expression.date(value);\r\n        } else {\r\n            return Expression.object(value);\r\n        }\r\n    }\r\n\r\n    static property(value) {\r\n        return new ValueExpression(\"property\", value);\r\n    }\r\n\r\n    static constant(value) {\r\n        return new ValueExpression(\"constant\", value);\r\n    }\r\n\r\n    static boolean(value) {\r\n        var expression = new ValueExpression(\"boolean\");\r\n        expression.value = value;\r\n        return expression;\r\n    }\r\n\r\n    static string(value) {\r\n        var expression = new ValueExpression(\"string\");\r\n        expression.value = value;\r\n        return expression;\r\n    }\r\n\r\n    static number(value) {\r\n        var expression = new ValueExpression(\"number\");\r\n        expression.value = value;\r\n        return expression;\r\n    }\r\n\r\n    static object(value) {\r\n        var expression = new ValueExpression(\"object\");\r\n        expression.value = value;\r\n        return expression;\r\n    }\r\n\r\n    static date(value) {\r\n        var expression = new ValueExpression(\"date\");\r\n        expression.value = value;\r\n        return expression;\r\n    }\r\n\r\n    static function(value) {\r\n        var expression = new ValueExpression(\"function\");\r\n        expression.value = value;\r\n        return expression;\r\n    }\r\n\r\n    static type(value) {\r\n        var expression = new ValueExpression(\"type\");\r\n        expression.value = value || Object;\r\n        return expression;\r\n    }\r\n\r\n    static null(value) {\r\n        var expression = new ValueExpression(\"null\");\r\n        expression.value = value;\r\n        return expression;\r\n    }\r\n\r\n    static undefined(value) {\r\n        var expression = new ValueExpression(\"undefined\");\r\n        expression.value = value;\r\n        return expression;\r\n    }\r\n\r\n    static array(value) {\r\n        var expression = new ValueExpression(\"array\");\r\n        expression.value = value;\r\n        return expression;\r\n    }\r\n\r\n    static queryable(leftExpression, rightExpression) {\r\n        var expression = new OperationExpression(\"queryable\");\r\n        expression.children.push(leftExpression, rightExpression);\r\n        return expression;\r\n    }\r\n\r\n    //\r\n    // OperationExpression helpers\r\n    //\r\n\r\n    static equalTo() {\r\n        var expression = new OperationExpression(\"equalTo\");\r\n        Array.prototype.slice.call(arguments, 0).forEach(arg => {\r\n            expression.children.push(arg);\r\n        });\r\n        return expression;\r\n    }\r\n\r\n    static notEqualTo() {\r\n        var expression = new OperationExpression(\"notEqualTo\");\r\n        Array.prototype.slice.call(arguments, 0).forEach(arg => {\r\n            expression.children.push(arg);\r\n        });\r\n        return expression;\r\n    }\r\n\r\n    static or() {\r\n        var expression = new OperationExpression(\"or\");\r\n        Array.prototype.slice.call(arguments, 0).forEach(arg => {\r\n            expression.children.push(arg);\r\n        });\r\n        return expression;\r\n    }\r\n\r\n    static and() {\r\n        var expression = new OperationExpression(\"and\");\r\n        Array.prototype.slice.call(arguments, 0).forEach(arg => {\r\n            expression.children.push(arg);\r\n        });\r\n        return expression;\r\n    }\r\n\r\n    static where() {\r\n        var expression = new OperationExpression(\"where\");\r\n        Array.prototype.slice.call(arguments, 0).forEach(arg => {\r\n            expression.children.push(arg);\r\n        });\r\n        return expression;\r\n    }\r\n\r\n    static greaterThan() {\r\n        var expression = new OperationExpression(\"greaterThan\");\r\n        Array.prototype.slice.call(arguments, 0).forEach(arg => {\r\n            expression.children.push(arg);\r\n        });\r\n        return expression;\r\n    }\r\n\r\n    static lessThan() {\r\n        var expression = new OperationExpression(\"lessThan\");\r\n        Array.prototype.slice.call(arguments, 0).forEach(arg => {\r\n            expression.children.push(arg);\r\n        });\r\n        return expression;\r\n    }\r\n\r\n    static greaterThanOrEqualTo() {\r\n        var expression = new OperationExpression(\"greaterThanOrEqualTo\");\r\n        Array.prototype.slice.call(arguments, 0).forEach(arg => {\r\n            expression.children.push(arg);\r\n        });\r\n        return expression;\r\n    }\r\n\r\n    static lessThanOrEqualTo() {\r\n        var expression = new OperationExpression(\"lessThanOrEqualTo\");\r\n        Array.prototype.slice.call(arguments, 0).forEach(arg => {\r\n            expression.children.push(arg);\r\n        });\r\n        return expression;\r\n    }\r\n\r\n    static orderBy() {\r\n        var expression = new OperationExpression(\"orderBy\");\r\n        Array.prototype.slice.call(arguments, 0).forEach(arg => {\r\n            expression.children.push(arg);\r\n        });\r\n        return expression;\r\n    }\r\n\r\n    static descending() {\r\n        var expression = new OperationExpression(\"descending\");\r\n        Array.prototype.slice.call(arguments, 0).forEach(arg => {\r\n            expression.children.push(arg);\r\n        });\r\n        return expression;\r\n    }\r\n\r\n    static ascending() {\r\n        var expression = new OperationExpression(\"ascending\");\r\n        Array.prototype.slice.call(arguments, 0).forEach(arg => {\r\n            expression.children.push(arg);\r\n        });\r\n        return expression;\r\n    }\r\n\r\n    static skip(value) {\r\n        var expression = new OperationExpression(\"skip\");\r\n        var valueExpression = Expression.constant(value);\r\n        expression.children.push(valueExpression);\r\n\r\n        return expression;\r\n    }\r\n\r\n    static take(value) {\r\n        var expression = new OperationExpression(\"take\");\r\n        var valueExpression = Expression.constant(value);\r\n        expression.children.push(valueExpression);\r\n\r\n        return expression;\r\n    }\r\n\r\n    static buildOperatorExpression(name) {\r\n        var expression = new OperationExpression(name);\r\n        var args = Array.prototype.slice.call(arguments, 1);\r\n        args.forEach(arg => {\r\n            expression.children.push(arg);\r\n        });\r\n\r\n        return expression;\r\n    }\r\n\r\n    static guid() {\r\n        var expression = new OperationExpression(\"guid\");\r\n        Array.prototype.slice.call(arguments, 0).forEach(arg => {\r\n            expression.children.push(arg);\r\n        });\r\n        return expression;\r\n    }\r\n\r\n    static substring() {\r\n        var expression = new OperationExpression(\"substring\");\r\n        Array.prototype.slice.call(arguments, 0).forEach(arg => {\r\n            expression.children.push(arg);\r\n        });\r\n        return expression;\r\n    }\r\n\r\n    static substringOf() {\r\n        var expression = new OperationExpression(\"substringOf\");\r\n        Array.prototype.slice.call(arguments, 0).forEach(arg => {\r\n            expression.children.push(arg);\r\n        });\r\n        return expression;\r\n    }\r\n\r\n    static startsWith() {\r\n        var expression = new OperationExpression(\"startsWith\");\r\n        Array.prototype.slice.call(arguments, 0).forEach(arg => {\r\n            expression.children.push(arg);\r\n        });\r\n        return expression;\r\n    }\r\n\r\n    static endsWith() {\r\n        var expression = new OperationExpression(\"endsWith\");\r\n        Array.prototype.slice.call(arguments, 0).forEach(arg => {\r\n            expression.children.push(arg);\r\n        });\r\n        return expression;\r\n    }\r\n\r\n    static isIn(property, array) {\r\n        var expression = new OperationExpression(\"isIn\");\r\n        Array.prototype.slice.call(arguments, 0).forEach(arg => {\r\n            expression.children.push(arg);\r\n        });\r\n        return expression;\r\n    }\r\n\r\n    static isNotIn(property, array) {\r\n        var expression = new OperationExpression(\"isNotIn\");\r\n        Array.prototype.slice.call(arguments, 0).forEach(arg => {\r\n            expression.children.push(arg);\r\n        });\r\n        return expression;\r\n    }\r\n\r\n    static include() {\r\n        var expression = new OperationExpression(\"include\");\r\n        Array.prototype.slice.call(arguments, 0).forEach(arg => {\r\n            expression.children.push(arg);\r\n        });\r\n        return expression;\r\n    }\r\n\r\n    static any(propertyAccessExpression, expression) {\r\n        var anyExpression = new OperationExpression(\"any\");\r\n        var expressionExpression = Expression.expression(expression);\r\n\r\n        anyExpression.children.push(propertyAccessExpression, expressionExpression);\r\n        return anyExpression;\r\n    }\r\n\r\n    static all(propertyAccessExpression, expression) {\r\n        var allExpression = new OperationExpression(\"all\");\r\n        var expressionExpression = Expression.expression(expression);\r\n\r\n        allExpression.children.push(propertyAccessExpression, expressionExpression);\r\n        return allExpression;\r\n    }\r\n\r\n    static expression(value) {\r\n        var expresssionExpression = new ValueExpression(\"expression\", value);\r\n\r\n        return expresssionExpression;\r\n    }\r\n\r\n    static propertyAccess(leftExpression, propertyName) {\r\n        var propertyExpression = Expression.property(propertyName);\r\n        var propertyAccessExpression = new OperationExpression(\"propertyAccess\");\r\n        propertyAccessExpression.children.push(leftExpression, propertyExpression);\r\n\r\n        return propertyAccessExpression;\r\n    }\r\n\r\n    static contains(Type, namespace, expression) {\r\n        var containsExpression = new OperationExpression(\"contains\");\r\n        var ofTypeExpression = new ValueExpression(\"ofType\", Type);\r\n        var propertyExpression = new ValueExpression(\"property\", namespace);\r\n\r\n        containsExpression.children.push(ofTypeExpression, propertyExpression, expression);\r\n\r\n        return containsExpression;\r\n    }\r\n\r\n    static intersects(Type, namespace, expression) {\r\n        var intersectsExpression = new OperationExpression(\"intersects\");\r\n        var ofTypeExpression = new ValueExpression(\"ofType\", Type);\r\n        var propertyExpression = new ValueExpression(\"property\", namespace);\r\n\r\n        intersectsExpression.children.push(ofTypeExpression, propertyExpression, expression);\r\n\r\n        return intersectsExpression;\r\n    }\r\n}\r\n\r\nclass ValueExpression extends Expression {\r\n    constructor(nodeName, value) {\r\n        super();\r\n        this.value = value;\r\n        this.nodeName = nodeName;\r\n    }\r\n\r\n    copy() {\r\n        return new ValueExpression(this.nodeName, this.value);\r\n    }\r\n\r\n    isEqualTo(node) {\r\n        if (node && this.nodeName === node.nodeName && this.value === node.value) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    contains(node) {\r\n        return this.isEqualTo(node);\r\n    }\r\n}\r\n\r\nclass OperationExpression extends Expression {\r\n    constructor(nodeName) {\r\n        super();\r\n        var args = Array.prototype.slice.call(arguments, 0);\r\n\r\n        this.nodeName = nodeName;\r\n        this.children = args.slice(1);\r\n    }\r\n    copy() {\r\n        var children = [];\r\n        var copy = new OperationExpression(this.nodeName);\r\n\r\n        this.children.forEach(expression => {\r\n            copy.children.push(expression.copy());\r\n        });\r\n\r\n        return copy;\r\n    }\r\n\r\n    isEqualTo() {\r\n        if (!Array.isArray(node.children) || this.nodeName !== node.nodeName) {\r\n            return false;\r\n        }\r\n\r\n        if (node.children.length !== this.children.length) {\r\n            return false;\r\n        }\r\n\r\n        return this.children.every((expression, index) => {\r\n            return expression.isEqualTo(node.children[index]);\r\n        });\r\n    }\r\n\r\n    contains(node) {\r\n        if (node.nodeName === this.nodeName && Array.isArray(node.children)) {\r\n            var matched = node.children.every((childNode, index) => {\r\n                return childNode.contains(this.children[index]);\r\n            });\r\n\r\n            if (matched) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return this.children.some(childNode => {\r\n            return childNode.contains(node);\r\n        });\r\n    }\r\n\r\n    getMatchingNodes(node, matchedNodes) {\r\n        matchedNodes = Array.isArray(matchedNodes) ? matchedNodes : [];\r\n\r\n        if (node.nodeName === this.nodeName && Array.isArray(node.children)) {\r\n            var matched = node.children.every((childNode, index) => {\r\n                return childNode.contains(this.children[index], matchedNodes);\r\n            });\r\n\r\n            if (matched) {\r\n                matchedNodes.push(this);\r\n            }\r\n        }\r\n\r\n        this.children.forEach(childNode => {\r\n            if (Array.isArray(childNode.children)) {\r\n                childNode.getMatchingNodes(node, matchedNodes);\r\n            }\r\n        }, matchedNodes);\r\n\r\n        return matchedNodes;\r\n    }\r\n}\r\n\r\nexport { Expression, ValueExpression, OperationExpression };\r\n"]}