{"version":3,"sources":["../../src/query/Queryable.js"],"names":["assertHasProvider","queryable","provider","Error","copyQuery","copy","where","query","orderBy","include","parameters","JSON","parse","stringify","take","skip","Queryable","Type","Object","nodeName","Infinity","lambda","rightExpression","getQuery","call","children","length","push","leftExpression","pop","or","and","value","propertyExpression","getExpression","descendingExpression","descending","contains","ascendingExpression","ascending","params","keys","forEach","key","expression","clone","cloneQuery","executeAsync","guid","constant","onEach","toArrayAsync","then","results","countAsync","toArrayWithCountAsync","allAsync","anyAsync","firstOrDefaultAsync","firstAsync","lastAsync","selectAsync","containsAsync","callback","count","a","compareToQueryable","Array","asQueryable","intersectsAsync"],"mappings":"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","file":"Queryable.js","sourcesContent":["import { Expression, ValueExpression, OperationExpression } from \"./Expression\";\r\nimport { ExpressionBuilder, OperationExpressionBuilder } from \"./ExpressionBuilder\";\r\n\r\nconst assertHasProvider = queryable => {\r\n    if (!queryable.provider) {\r\n        throw new Error(\"No provider found.\");\r\n    }\r\n};\r\n\r\nconst copyQuery = query => {\r\n    var copy = {};\r\n\r\n    copy.where = query.where.copy();\r\n    copy.orderBy = query.orderBy.copy();\r\n    copy.include = query.include.copy();\r\n    copy.parameters = JSON.parse(JSON.stringify(query.parameters));\r\n    copy.take = query.take;\r\n    copy.skip = query.skip;\r\n\r\n    return copy;\r\n};\r\n\r\nexport default class Queryable {\r\n    constructor(Type, query) {\r\n        query = query || {};\r\n\r\n        this.Type = Type || Object;\r\n        this.provider = null;\r\n        this.query = {};\r\n        this.query.parameters = (query && query.parameters) || {};\r\n\r\n        if (query.where != null && query.where.nodeName === \"where\") {\r\n            this.query.where = query.where;\r\n        } else {\r\n            this.query.where = Expression.where();\r\n        }\r\n\r\n        if (query.skip != null && query.skip.nodeName === \"skip\") {\r\n            this.query.skip = query.skip;\r\n        } else {\r\n            this.query.skip = Expression.skip(0);\r\n        }\r\n\r\n        if (query.take != null && query.take.nodeName === \"take\") {\r\n            this.query.take = query.take;\r\n        } else {\r\n            this.query.take = Expression.take(Infinity);\r\n        }\r\n\r\n        if (query.include != null && query.include.nodeName === \"include\") {\r\n            this.query.include = query.include;\r\n        } else {\r\n            this.query.include = Expression.include();\r\n        }\r\n\r\n        if (query.orderBy != null && query.orderBy.nodeName === \"orderBy\") {\r\n            this.query.orderBy = query.orderBy;\r\n        } else {\r\n            this.query.orderBy = Expression.orderBy();\r\n        }\r\n    }\r\n\r\n    getExpression() {\r\n        return this.query;\r\n    }\r\n\r\n    getQuery() {\r\n        return this.query;\r\n    }\r\n\r\n    or(lambda) {\r\n        var rightExpression;\r\n        var query = copyQuery(this.getQuery());\r\n\r\n        if (typeof lambda === \"function\") {\r\n            lambda = lambda || function() {};\r\n            rightExpression = lambda.call(ExpressionBuilder, new ExpressionBuilder(this.Type));\r\n        } else if (lambda instanceof Expression) {\r\n            rightExpression = lambda;\r\n        } else {\r\n            throw new Error(\"Expected an expression to be supplied.\");\r\n        }\r\n\r\n        if (query.where.children.length === 0) {\r\n            query.where.children.push(rightExpression);\r\n        } else {\r\n            var leftExpression = query.where.children.pop();\r\n            query.where.children.push(Expression.or(leftExpression, rightExpression));\r\n        }\r\n\r\n        return this.copy(query);\r\n    }\r\n\r\n    where(lambda) {\r\n        var rightExpression;\r\n        var query = copyQuery(this.getQuery());\r\n\r\n        if (typeof lambda === \"function\") {\r\n            lambda = lambda || function() {};\r\n            rightExpression = lambda.call(ExpressionBuilder, new ExpressionBuilder(this.Type));\r\n        } else if (lambda instanceof Expression) {\r\n            rightExpression = lambda;\r\n        } else {\r\n            throw new Error(\"Expected an expression to be supplied.\");\r\n        }\r\n\r\n        if (query.where.children.length === 0) {\r\n            query.where.children.push(rightExpression);\r\n        } else {\r\n            var leftExpression = query.where.children.pop();\r\n            query.where.children.push(Expression.and(leftExpression, rightExpression));\r\n        }\r\n\r\n        return this.copy(query);\r\n    }\r\n\r\n    and(lambda) {\r\n        return this.where(lambda);\r\n    }\r\n\r\n    take(value) {\r\n        if (typeof value !== \"number\") {\r\n            throw new Error(\"Illegal Argument Exception: value needs to be a number.\");\r\n        }\r\n\r\n        var query = copyQuery(this.getQuery());\r\n        query.take = Expression.take(value);\r\n\r\n        return this.copy(query);\r\n    }\r\n\r\n    skip(value) {\r\n        if (typeof value !== \"number\") {\r\n            throw new Error(\"Illegal Argument Exception: value needs to be a number.\");\r\n        }\r\n\r\n        var query = copyQuery(this.getQuery());\r\n        query.skip = Expression.skip(value);\r\n\r\n        return this.copy(query);\r\n    }\r\n\r\n    orderByDesc(lambda) {\r\n        var propertyExpression;\r\n        var query = copyQuery(this.getQuery());\r\n\r\n        if (typeof lambda === \"function\") {\r\n            lambda = lambda || function() {};\r\n            propertyExpression = lambda.call(ExpressionBuilder, new ExpressionBuilder(this.Type)).getExpression();\r\n        } else if (lambda instanceof OperationExpressionBuilder) {\r\n            propertyExpression = lambda.getExpression();\r\n        } else {\r\n            throw new Error(\"Expected a property to orderByDesc.\");\r\n        }\r\n\r\n        var descendingExpression = Expression.descending(propertyExpression);\r\n\r\n        if (!query.orderBy.contains(propertyExpression)) {\r\n            query.orderBy.children.push(descendingExpression);\r\n            return this.copy(query);\r\n        } else {\r\n            return this;\r\n        }\r\n    }\r\n\r\n    orderBy(lambda) {\r\n        var propertyExpression;\r\n        var query = copyQuery(this.getQuery());\r\n\r\n        if (typeof lambda === \"function\") {\r\n            lambda = lambda || function() {};\r\n            propertyExpression = lambda.call(ExpressionBuilder, new ExpressionBuilder(this.Type)).getExpression();\r\n        } else if (lambda instanceof OperationExpressionBuilder) {\r\n            propertyExpression = lambda.getExpression();\r\n        } else {\r\n            throw new Error(\"Expected a property to orderBy.\");\r\n        }\r\n\r\n        var ascendingExpression = Expression.ascending(propertyExpression);\r\n\r\n        if (!query.orderBy.contains(propertyExpression)) {\r\n            query.orderBy.children.push(ascendingExpression);\r\n            return this.copy(query);\r\n        } else {\r\n            return this;\r\n        }\r\n    }\r\n\r\n    setParameters(params) {\r\n        if (!params) {\r\n            throw new Error(\"Expected parameters to be passed in.\");\r\n        }\r\n        var parameters = this.query.parameters;\r\n\r\n        Object.keys(params).forEach(function(key) {\r\n            parameters[key] = params[key];\r\n        });\r\n        return this;\r\n    }\r\n\r\n    withParameters(params) {\r\n        if (!params) {\r\n            throw new Error(\"Expected parameters to be passed in.\");\r\n        }\r\n\r\n        var parameters = (this.query.parameters = {});\r\n        Object.keys(params).forEach(function(key) {\r\n            parameters[key] = params[key];\r\n        });\r\n        return this;\r\n    }\r\n\r\n    include(lambda) {\r\n        var propertyExpression;\r\n        var query = copyQuery(this.getQuery());\r\n\r\n        if (typeof lambda === \"function\") {\r\n            lambda = lambda || function() {};\r\n            propertyExpression = lambda.call(ExpressionBuilder, new ExpressionBuilder(this.Type)).getExpression();\r\n        } else if (lambda instanceof OperationExpressionBuilder) {\r\n            propertyExpression = lambda.getExpression();\r\n        } else {\r\n            throw new Error(\"Expected a property to include.\");\r\n        }\r\n\r\n        if (propertyExpression.nodeName !== \"queryable\") {\r\n            propertyExpression = Expression.queryable(propertyExpression, Expression.expression(Expression.where()));\r\n        }\r\n\r\n        query.include.children.push(propertyExpression);\r\n        return this.copy(query);\r\n    }\r\n\r\n    merge(queryable) {\r\n        if (!(queryable instanceof Queryable)) {\r\n            throw new Error(\"Expected a queryable to be passed in.\");\r\n        }\r\n\r\n        var clone = this.copy();\r\n        var cloneQuery = clone.getQuery();\r\n        var query = queryable.getQuery();\r\n        var rightExpression = query.where.children[0];\r\n\r\n        if (rightExpression != null) {\r\n            // No need to copy if there is nothing to copy.\r\n            if (cloneQuery.where.children.length === 0) {\r\n                cloneQuery.where.children.push(rightExpression.copy());\r\n            } else if (cloneQuery.where.children.length === 1 && cloneQuery.where.children[0].nodeName === \"and\") {\r\n                cloneQuery.where.children[0].children.push(rightExpression.copy());\r\n            } else {\r\n                var leftExpression = cloneQuery.where.children.pop();\r\n                cloneQuery.where.children.push(Expression.and(leftExpression, rightExpression.copy()));\r\n            }\r\n        }\r\n\r\n        query.include.children.forEach(function(expression) {\r\n            cloneQuery.include.children.push(expression.copy());\r\n        });\r\n\r\n        query.orderBy.children.forEach(function(expression) {\r\n            if (!cloneQuery.orderBy.contains(expression)) {\r\n                cloneQuery.orderBy.children.push(expression.copy());\r\n            }\r\n        });\r\n\r\n        return this.copy(cloneQuery);\r\n    }\r\n\r\n    toArrayAsync() {\r\n        assertHasProvider(this);\r\n        return this.provider.executeAsync(this);\r\n    }\r\n\r\n    toGuid(value) {\r\n        return Expression.guid(Expression.constant(value));\r\n    }\r\n\r\n    forEachAsync(onEach) {\r\n        return this.toArrayAsync().then(function(results) {\r\n            results.forEach(onEach);\r\n            return results;\r\n        });\r\n    }\r\n\r\n    countAsync() {\r\n        assertHasProvider(this);\r\n        return this.provider.countAsync(this);\r\n    }\r\n\r\n    toArrayWithCountAsync() {\r\n        assertHasProvider(this);\r\n        return this.provider.toArrayWithCountAsync(this);\r\n    }\r\n\r\n    allAsync(lambda) {\r\n        assertHasProvider(this);\r\n        return this.provider.allAsync(this, lambda);\r\n    }\r\n\r\n    anyAsync(lambda) {\r\n        assertHasProvider(this);\r\n        return this.provider.anyAsync(this, lambda);\r\n    }\r\n\r\n    firstOrDefaultAsync(lambda) {\r\n        assertHasProvider(this);\r\n        return this.provider.firstOrDefaultAsync(this, lambda);\r\n    }\r\n\r\n    firstAsync(lambda) {\r\n        assertHasProvider(this);\r\n        return this.provider.firstAsync(this, lambda);\r\n    }\r\n\r\n    lastAsync(lambda) {\r\n        assertHasProvider(this);\r\n        return this.provider.lastAsync(this, lambda);\r\n    }\r\n\r\n    selectAsync(lambda) {\r\n        assertHasProvider(this);\r\n        return this.provider.selectAsync(this, lambda);\r\n    }\r\n\r\n    containsAsync(lambda) {\r\n        assertHasProvider(this);\r\n        return this.provider.containsAsync(this, lambda);\r\n    }\r\n\r\n    ifNone(callback) {\r\n        this.countAsync().then(function(count) {\r\n            if (count === 0) {\r\n                callback();\r\n            }\r\n        });\r\n\r\n        return this;\r\n    }\r\n\r\n    ifAny(callback) {\r\n        this.toArrayAsync(function(a) {\r\n            if (a.length > 0) {\r\n                callback(a);\r\n            }\r\n        });\r\n\r\n        return this;\r\n    }\r\n\r\n    intersectsAsync(compareToQueryable) {\r\n        assertHasProvider(this);\r\n        if (compareToQueryable instanceof Array) {\r\n            compareToQueryable = compareToQueryable.asQueryable();\r\n        }\r\n        return this.provider.intersectsAsync(this, compareToQueryable);\r\n    }\r\n\r\n    ofType(Type) {\r\n        var queryable = new Queryable(Type);\r\n        queryable.provider = this.provider;\r\n        return queryable;\r\n    }\r\n\r\n    copy(query) {\r\n        var queryable = new Queryable(this.Type, query || copyQuery(this.query));\r\n        queryable.provider = this.provider;\r\n        return queryable;\r\n    }\r\n}\r\n"]}